name: Build

on:
  push:
    branches:
      - '**'
  pull_request:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [
          ubuntu-latest,
          macos-13,
          macos-14,
          windows-latest
        ]
      fail-fast: false
    name: ${{ matrix.os }}
    steps:
      - name: Git checkout
        uses: actions/checkout@v4

      - name: Set up GraalVM
        uses: graalvm/setup-graalvm@v1
        with:
          java-version: '24.0.2'
          distribution: 'graalvm-community'
          cache: gradle
          github-token: ${{ secrets.JRELEASER_GITHUB_TOKEN }}

      - name: Install create-dmg for macOS
        run: brew install create-dmg
        shell: bash
        if: ${{ startsWith(matrix.os, 'mac') && github.ref == 'refs/heads/master' }}

      - name: Install the Apple certificate and provisioning profile
        env:
          MAC_DEVELOPER_ID_APPLCATION_CERTIFICATE: ${{ secrets.MAC_DEVELOPER_ID_APPLCATION_CERTIFICATE }}
          MAC_DEVELOPER_ID_APPLCATION_CERTIFICATE_PASSWORD: ${{ secrets.MAC_DEVELOPER_ID_APPLCATION_CERTIFICATE_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$MAC_DEVELOPER_ID_APPLCATION_CERTIFICATE" | base64 -d -o $CERTIFICATE_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$MAC_DEVELOPER_ID_APPLCATION_CERTIFICATE_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
        if: ${{ startsWith(matrix.os, 'mac') && github.ref == 'refs/heads/master' }}

      - name: Execute dist build
        env:
          MAC_APP_SPECIFIC_PASSWORD: ${{ secrets.MAC_APP_SPECIFIC_PASSWORD }}
          MAC_NOTARIZATION_APPLE_ID: ${{ secrets.MAC_NOTARIZATION_APPLE_ID }}
          MAC_NOTARIZATION_TEAM_ID: ${{ secrets.MAC_NOTARIZATION_TEAM_ID }}
        run: ./gradle/gradlew createDist

      - name: JReleaser Release
        run: ./gradle/gradlew jreleaserRelease --stacktrace "-Dorg.gradle.jvmargs=-Xmx2048M"
        env:
          JRELEASER_GITHUB_TOKEN: ${{ secrets.JRELEASER_GITHUB_TOKEN }}
          JRELEASER_DISCORD_WEBHOOK: ${{ secrets.JRELEASER_DISCORD_WEBHOOK }}
        if: ${{ github.ref == 'refs/heads/master' }}

      - name: JReleaser Announce
        run: ./gradle/gradlew jreleaserAnnounce
        env:
          JRELEASER_GITHUB_TOKEN: ${{ secrets.JRELEASER_GITHUB_TOKEN }}
          JRELEASER_DISCORD_WEBHOOK: ${{ secrets.JRELEASER_DISCORD_WEBHOOK }}
        if: ${{ matrix.os == 'windows-latest' && github.ref == 'refs/heads/master' }}

      - name: Upload mac dist as an artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-artifacts
          path: |
            build/pdx_unlimiter-macos-x86_64.dmg
            build/pdx_unlimiter-macos-arm64.dmg
          if-no-files-found: ignore

      - name: Upload Windows dist as an artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-artifacts
          path: build/pdx_unlimiter-windows.zip
          if-no-files-found: ignore

      - name: Upload Linux dist as an artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-artifacts
          path: build/pdx_unlimiter-linux.zip
          if-no-files-found: ignore
